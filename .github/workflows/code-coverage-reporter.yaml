name: Code Coverage Reporter
on: [pull_request]
jobs:
  build:
    name: Build and test source branch "${{ github.ref }}"
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15.3
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Download source code
        uses: actions/checkout@v3
      - name: Build and test
        uses: ./.github/actions/build-and-test

  build-target:
    name: Build and test target branch "${{ github.base_ref }}"
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15.3
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Download source branch source code
        uses: actions/checkout@v3
        with:
          path: ./source
      - name: Download target branch source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          path: ./target
      - name: Build and test
        uses: ./source/.github/actions/build-and-test
        with:
          working-directory: ./target
          coverage-output: coverage-target

  pycobertura:
    name: Run pycobertura
    runs-on: ubuntu-latest
    needs: [build, build-target]
    permissions:
      pull-requests: write
    steps:
      - name: Download source branch "${{ github.ref }}" source code
        uses: actions/checkout@v3
        with:
          path: ./source
      - name: Download source branch "${{ github.ref }}" coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage
      - name: Download target branch "${{ github.base_ref }}" source code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          path: ./target
      - name: Download target branch "${{ github.base_ref }}" coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-target
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install pycobertura
        run: |
          python -m pip install --upgrade pip
          pip install pycobertura
      - name: Generate comment markdown
        env:
          SOURCE: ${{ github.head_ref }}
          TARGET: ${{ github.base_ref }}
        run: |
          touch comment.md
          echo "# Source branch coverage ($SOURCE)" >> comment.md
          pycobertura show --format markdown coverage.xml >> comment.md
          echo "# Target branch coverage ($TARGET)" >> comment.md
          pycobertura show --format markdown coverage-target.xml >> comment.md
          echo "# Diff coverage" >> comment.md
          pycobertura diff --format markdown coverage-target.xml coverage.xml --source1 target/ --source2 source/ >> comment.md
      - name: Add comment to pull request
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: comment.md
      - name: Annotate pull request
        run: pycobertura show --format github-annotation coverage.xml | sed 's/notice/warning/g'
  # build:
  #   uses: ./.github/workflows/python-package.yaml
  #
  # codacy-reporter:
  #   runs-on: ubuntu-latest
  #   name: codacy-reporter
  #
  #   needs: build
  #   steps:
  #     - name: Download coverage report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: coverage-result
  #     - name: Upload coverage reports to Codacy
  #       uses: codacy/codacy-coverage-reporter-action@v1
  #       with:
  #         project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
  #         coverage-reports: coverage.xml
  #
  # codecov-reporter:
  #   runs-on: ubuntu-latest
  #   name: codecov-reporter
  #
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Download coverage report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: coverage-result
  #     - name: Upload coverage reports to Codecov
  #       uses: codecov/codecov-action@v3
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  #
  # coveralls-reporter:
  #   runs-on: ubuntu-latest
  #   name: coveralls-reporter
  #
  #   needs: build
  #   steps:
  #     - name: Download coverage report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: coverage-result
  #     - name: Upload coverage reports to Coveralls
  #       uses: coverallsapp/github-action@v2
